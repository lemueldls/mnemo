diff --git a/dist/adapters/cloudflare.mjs b/dist/adapters/cloudflare.mjs
index 402eb25cbe1a5f23af06a89ec2b78579278f1c7a..cf2b5cf160dae4e82d634e64ecf69efdb1cb6ff4 100644
--- a/dist/adapters/cloudflare.mjs
+++ b/dist/adapters/cloudflare.mjs
@@ -77,9 +77,7 @@ const cloudflareAdapter = (opts = {}) => {
     handleDurableInit: async (obj, state, env) => {
     },
     handleDurableUpgrade: async (obj, request) => {
-      const { upgradeHeaders, endResponse, namespace } = await hooks.upgrade(
-        request
-      );
+      const { upgradeHeaders, endResponse, context, namespace } = await hooks.upgrade(request);
       if (endResponse) {
         return endResponse;
       }
@@ -93,8 +91,13 @@ const cloudflareAdapter = (opts = {}) => {
         request,
         namespace
       );
+      await peer._loadContext();
       peers.add(peer);
       obj.ctx.acceptWebSocket(server);
+      await obj.ctx.storage.put(
+        `_context:${peer.id}`,
+        context
+      );
       await hooks.callHook("open", peer);
       return new Response(null, {
         status: 101,
@@ -104,14 +107,18 @@ const cloudflareAdapter = (opts = {}) => {
     },
     handleDurableMessage: async (obj, ws, message) => {
       const peer = CloudflareDurablePeer._restore(obj, ws);
+      await peer._loadContext();
       await hooks.callHook("message", peer, new Message(message, peer));
     },
     handleDurableClose: async (obj, ws, code, reason, wasClean) => {
       const peer = CloudflareDurablePeer._restore(obj, ws);
+      await peer._loadContext();
       const peers = getPeers(globalPeers, peer.namespace);
       peers.delete(peer);
       const details = { code, reason, wasClean };
       await hooks.callHook("close", peer, details);
+      await obj.ctx.storage.deleteAlarm();
+      await obj.ctx.storage.deleteAll();
     },
     handleDurablePublish: async (_obj, topic, data, opts2) => {
       return durablePublish(topic, data, opts2);
@@ -141,6 +148,14 @@ class CloudflareDurablePeer extends Peer {
   #getwebsockets() {
     return this._internal.durable.ctx.getWebSockets();
   }
+  async _loadContext() {
+    if (!this._internal.context) {
+      this._internal.context = await this._internal.durable.ctx.storage.get(
+        `_context:${this.id}`
+      ) || {};
+    }
+    return this._internal.context;
+  }
   send(data) {
     return this._internal.ws.send(toBufferLike(data));
   }
@@ -191,7 +206,11 @@ class CloudflareDurablePeer extends Peer {
       state.u = request.url;
     }
     state.i = peer.id;
+    state.n = peer.namespace;
     setAttachedState(ws, state);
+    durable.ctx.blockConcurrencyWhile(async () => {
+      await peer._loadContext();
+    });
     return peer;
   }
 }
