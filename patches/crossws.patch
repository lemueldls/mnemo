diff --git a/dist/adapters/cloudflare.mjs b/dist/adapters/cloudflare.mjs
index 402eb25cbe1a5f23af06a89ec2b78579278f1c7a..1bf8e3a3231885a5ec7c05c61a7c532c5a824987 100644
--- a/dist/adapters/cloudflare.mjs
+++ b/dist/adapters/cloudflare.mjs
@@ -74,12 +74,13 @@ const cloudflareAdapter = (opts = {}) => {
         headers: upgradeHeaders
       });
     },
-    handleDurableInit: async (obj, state, env) => {
+    handleDurableInit: (obj, state, env) => {
+      state.blockConcurrencyWhile(async () => {
+        obj.context = (await state.storage.get("context", { allowConcurrency: false })) || {};
+      });
     },
     handleDurableUpgrade: async (obj, request) => {
-      const { upgradeHeaders, endResponse, namespace } = await hooks.upgrade(
-        request
-      );
+      const { upgradeHeaders, endResponse, context, namespace } = await hooks.upgrade(request);
       if (endResponse) {
         return endResponse;
       }
@@ -90,11 +91,20 @@ const cloudflareAdapter = (opts = {}) => {
       const peer = CloudflareDurablePeer._restore(
         obj,
         server,
+        context,
         request,
         namespace
       );
       peers.add(peer);
       obj.ctx.acceptWebSocket(server);
+      console.log(1, "object context", obj.context);
+      console.log("setting context", context ? JSON.stringify(context) : "nothing lol")
+      obj.context = context;
+      await obj.ctx.storage.put("context", context, { allowConcurrency: false });
+      console.log(
+        "context after put",
+        await obj.ctx.storage.get("context", { allowConcurrency: false }),
+      );
       await hooks.callHook("open", peer);
       return new Response(null, {
         status: 101,
@@ -103,15 +113,31 @@ const cloudflareAdapter = (opts = {}) => {
       });
     },
     handleDurableMessage: async (obj, ws, message) => {
-      const peer = CloudflareDurablePeer._restore(obj, ws);
+      console.log(2, "object context", obj.context);
+      console.log("getting context")
+      const context = await obj.ctx.storage.get("context", { allowConcurrency: false }) || {};
+      console.log("got", context)
+      console.log(await obj.ctx.storage.get("context", { allowConcurrency: false }))
+      const peer = CloudflareDurablePeer._restore(
+        obj,
+        ws,
+        context
+      );
       await hooks.callHook("message", peer, new Message(message, peer));
     },
     handleDurableClose: async (obj, ws, code, reason, wasClean) => {
-      const peer = CloudflareDurablePeer._restore(obj, ws);
+      const context = await obj.ctx.storage.get("context", { allowConcurrency: false }) || {};
+      const peer = CloudflareDurablePeer._restore(
+        obj,
+        ws,
+        context
+      );
       const peers = getPeers(globalPeers, peer.namespace);
       peers.delete(peer);
       const details = { code, reason, wasClean };
       await hooks.callHook("close", peer, details);
+      await obj.ctx.storage.deleteAlarm();
+      await obj.ctx.storage.deleteAll();
     },
     handleDurablePublish: async (_obj, topic, data, opts2) => {
       return durablePublish(topic, data, opts2);
@@ -134,7 +160,11 @@ class CloudflareDurablePeer extends Peer {
   get peers() {
     return new Set(
       this.#getwebsockets().map(
-        (ws) => CloudflareDurablePeer._restore(this._internal.durable, ws)
+        (ws) => CloudflareDurablePeer._restore(
+          this._internal.durable,
+          ws,
+          this._internal.context
+        )
       )
     );
   }
@@ -172,7 +202,7 @@ class CloudflareDurablePeer extends Peer {
   close(code, reason) {
     this._internal.ws.close(code, reason);
   }
-  static _restore(durable, ws, request, namespace) {
+  static _restore(durable, ws, context, request, namespace) {
     let peer = ws._crosswsPeer;
     if (peer) {
       return peer;
@@ -180,6 +210,7 @@ class CloudflareDurablePeer extends Peer {
     const state = ws.deserializeAttachment() || {};
     peer = ws._crosswsPeer = new CloudflareDurablePeer({
       ws,
+      context,
       request: request || new StubRequest(state.u || ""),
       namespace: namespace || state.n || "",
       durable
