diff --git a/dist/adapters/cloudflare.mjs b/dist/adapters/cloudflare.mjs
index 402eb25cbe1a5f23af06a89ec2b78579278f1c7a..7889feba6f6d8baf93cd3b79e24f1c17c77f3745 100644
--- a/dist/adapters/cloudflare.mjs
+++ b/dist/adapters/cloudflare.mjs
@@ -74,12 +74,10 @@ const cloudflareAdapter = (opts = {}) => {
         headers: upgradeHeaders
       });
     },
-    handleDurableInit: async (obj, state, env) => {
+    handleDurableInit: (obj, state, env) => {
     },
     handleDurableUpgrade: async (obj, request) => {
-      const { upgradeHeaders, endResponse, namespace } = await hooks.upgrade(
-        request
-      );
+      const { upgradeHeaders, endResponse, context, namespace } = await hooks.upgrade(request);
       if (endResponse) {
         return endResponse;
       }
@@ -95,6 +93,10 @@ const cloudflareAdapter = (opts = {}) => {
       );
       peers.add(peer);
       obj.ctx.acceptWebSocket(server);
+      await obj.ctx.storage.put(
+        `_context:${peer.id}`,
+        context
+      );
       await hooks.callHook("open", peer);
       return new Response(null, {
         status: 101,
@@ -112,6 +114,8 @@ const cloudflareAdapter = (opts = {}) => {
       peers.delete(peer);
       const details = { code, reason, wasClean };
       await hooks.callHook("close", peer, details);
+      await obj.ctx.storage.deleteAlarm();
+      await obj.ctx.storage.deleteAll();
     },
     handleDurablePublish: async (_obj, topic, data, opts2) => {
       return durablePublish(topic, data, opts2);
@@ -138,9 +142,20 @@ class CloudflareDurablePeer extends Peer {
       )
     );
   }
+  get context() {
+    return this._internal.context ??= {};
+  }
   #getwebsockets() {
     return this._internal.durable.ctx.getWebSockets();
   }
+  async #loadContext() {
+    if (!this._internal.context) {
+      this._internal.context = await this._internal.durable.ctx.storage.get(
+        `_context:${this.id}`
+      ) || {};
+    }
+    return this._internal.context;
+  }
   send(data) {
     return this._internal.ws.send(toBufferLike(data));
   }
@@ -191,7 +206,9 @@ class CloudflareDurablePeer extends Peer {
       state.u = request.url;
     }
     state.i = peer.id;
+    state.n = peer.namespace;
     setAttachedState(ws, state);
+    peer.#loadContext().catch(console.error);
     return peer;
   }
 }
